# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdmap_api_py', [dirname(__file__)])
        except ImportError:
            import _hdmap_api_py
            return _hdmap_api_py
        if fp is not None:
            try:
                _mod = imp.load_module('_hdmap_api_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hdmap_api_py = swig_import_helper()
    del swig_import_helper
else:
    import _hdmap_api_py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdmap_api_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hdmap_api_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hdmap_api_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hdmap_api_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hdmap_api_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hdmap_api_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hdmap_api_py.SwigPyIterator_copy(self)

    def next(self):
        return _hdmap_api_py.SwigPyIterator_next(self)

    def __next__(self):
        return _hdmap_api_py.SwigPyIterator___next__(self)

    def previous(self):
        return _hdmap_api_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hdmap_api_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hdmap_api_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hdmap_api_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hdmap_api_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hdmap_api_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hdmap_api_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hdmap_api_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hdmap_api_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class AttributeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdmap_api_py.AttributeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdmap_api_py.AttributeVector___nonzero__(self)

    def __bool__(self):
        return _hdmap_api_py.AttributeVector___bool__(self)

    def __len__(self):
        return _hdmap_api_py.AttributeVector___len__(self)

    def __getslice__(self, i, j):
        return _hdmap_api_py.AttributeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdmap_api_py.AttributeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdmap_api_py.AttributeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdmap_api_py.AttributeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdmap_api_py.AttributeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdmap_api_py.AttributeVector___setitem__(self, *args)

    def pop(self):
        return _hdmap_api_py.AttributeVector_pop(self)

    def append(self, x):
        return _hdmap_api_py.AttributeVector_append(self, x)

    def empty(self):
        return _hdmap_api_py.AttributeVector_empty(self)

    def size(self):
        return _hdmap_api_py.AttributeVector_size(self)

    def swap(self, v):
        return _hdmap_api_py.AttributeVector_swap(self, v)

    def begin(self):
        return _hdmap_api_py.AttributeVector_begin(self)

    def end(self):
        return _hdmap_api_py.AttributeVector_end(self)

    def rbegin(self):
        return _hdmap_api_py.AttributeVector_rbegin(self)

    def rend(self):
        return _hdmap_api_py.AttributeVector_rend(self)

    def clear(self):
        return _hdmap_api_py.AttributeVector_clear(self)

    def get_allocator(self):
        return _hdmap_api_py.AttributeVector_get_allocator(self)

    def pop_back(self):
        return _hdmap_api_py.AttributeVector_pop_back(self)

    def erase(self, *args):
        return _hdmap_api_py.AttributeVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdmap_api_py.new_AttributeVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hdmap_api_py.AttributeVector_push_back(self, x)

    def front(self):
        return _hdmap_api_py.AttributeVector_front(self)

    def back(self):
        return _hdmap_api_py.AttributeVector_back(self)

    def assign(self, n, x):
        return _hdmap_api_py.AttributeVector_assign(self, n, x)

    def resize(self, *args):
        return _hdmap_api_py.AttributeVector_resize(self, *args)

    def insert(self, *args):
        return _hdmap_api_py.AttributeVector_insert(self, *args)

    def reserve(self, n):
        return _hdmap_api_py.AttributeVector_reserve(self, n)

    def capacity(self):
        return _hdmap_api_py.AttributeVector_capacity(self)
    __swig_destroy__ = _hdmap_api_py.delete_AttributeVector
    __del__ = lambda self: None
AttributeVector_swigregister = _hdmap_api_py.AttributeVector_swigregister
AttributeVector_swigregister(AttributeVector)

class AttributeOptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeOptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeOptionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdmap_api_py.AttributeOptionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdmap_api_py.AttributeOptionVector___nonzero__(self)

    def __bool__(self):
        return _hdmap_api_py.AttributeOptionVector___bool__(self)

    def __len__(self):
        return _hdmap_api_py.AttributeOptionVector___len__(self)

    def __getslice__(self, i, j):
        return _hdmap_api_py.AttributeOptionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdmap_api_py.AttributeOptionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdmap_api_py.AttributeOptionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdmap_api_py.AttributeOptionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdmap_api_py.AttributeOptionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdmap_api_py.AttributeOptionVector___setitem__(self, *args)

    def pop(self):
        return _hdmap_api_py.AttributeOptionVector_pop(self)

    def append(self, x):
        return _hdmap_api_py.AttributeOptionVector_append(self, x)

    def empty(self):
        return _hdmap_api_py.AttributeOptionVector_empty(self)

    def size(self):
        return _hdmap_api_py.AttributeOptionVector_size(self)

    def swap(self, v):
        return _hdmap_api_py.AttributeOptionVector_swap(self, v)

    def begin(self):
        return _hdmap_api_py.AttributeOptionVector_begin(self)

    def end(self):
        return _hdmap_api_py.AttributeOptionVector_end(self)

    def rbegin(self):
        return _hdmap_api_py.AttributeOptionVector_rbegin(self)

    def rend(self):
        return _hdmap_api_py.AttributeOptionVector_rend(self)

    def clear(self):
        return _hdmap_api_py.AttributeOptionVector_clear(self)

    def get_allocator(self):
        return _hdmap_api_py.AttributeOptionVector_get_allocator(self)

    def pop_back(self):
        return _hdmap_api_py.AttributeOptionVector_pop_back(self)

    def erase(self, *args):
        return _hdmap_api_py.AttributeOptionVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdmap_api_py.new_AttributeOptionVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hdmap_api_py.AttributeOptionVector_push_back(self, x)

    def front(self):
        return _hdmap_api_py.AttributeOptionVector_front(self)

    def back(self):
        return _hdmap_api_py.AttributeOptionVector_back(self)

    def assign(self, n, x):
        return _hdmap_api_py.AttributeOptionVector_assign(self, n, x)

    def resize(self, *args):
        return _hdmap_api_py.AttributeOptionVector_resize(self, *args)

    def insert(self, *args):
        return _hdmap_api_py.AttributeOptionVector_insert(self, *args)

    def reserve(self, n):
        return _hdmap_api_py.AttributeOptionVector_reserve(self, n)

    def capacity(self):
        return _hdmap_api_py.AttributeOptionVector_capacity(self)
    __swig_destroy__ = _hdmap_api_py.delete_AttributeOptionVector
    __del__ = lambda self: None
AttributeOptionVector_swigregister = _hdmap_api_py.AttributeOptionVector_swigregister
AttributeOptionVector_swigregister(AttributeOptionVector)

class AttributeOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeOption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdmap_api_py.new_AttributeOption(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _hdmap_api_py.AttributeOption_first_set
    __swig_getmethods__["first"] = _hdmap_api_py.AttributeOption_first_get
    if _newclass:
        first = _swig_property(_hdmap_api_py.AttributeOption_first_get, _hdmap_api_py.AttributeOption_first_set)
    __swig_setmethods__["second"] = _hdmap_api_py.AttributeOption_second_set
    __swig_getmethods__["second"] = _hdmap_api_py.AttributeOption_second_get
    if _newclass:
        second = _swig_property(_hdmap_api_py.AttributeOption_second_get, _hdmap_api_py.AttributeOption_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _hdmap_api_py.delete_AttributeOption
    __del__ = lambda self: None
AttributeOption_swigregister = _hdmap_api_py.AttributeOption_swigregister
AttributeOption_swigregister(AttributeOption)

class VisualObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisualObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdmap_api_py.VisualObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdmap_api_py.VisualObjectVector___nonzero__(self)

    def __bool__(self):
        return _hdmap_api_py.VisualObjectVector___bool__(self)

    def __len__(self):
        return _hdmap_api_py.VisualObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _hdmap_api_py.VisualObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdmap_api_py.VisualObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdmap_api_py.VisualObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdmap_api_py.VisualObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdmap_api_py.VisualObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdmap_api_py.VisualObjectVector___setitem__(self, *args)

    def pop(self):
        return _hdmap_api_py.VisualObjectVector_pop(self)

    def append(self, x):
        return _hdmap_api_py.VisualObjectVector_append(self, x)

    def empty(self):
        return _hdmap_api_py.VisualObjectVector_empty(self)

    def size(self):
        return _hdmap_api_py.VisualObjectVector_size(self)

    def swap(self, v):
        return _hdmap_api_py.VisualObjectVector_swap(self, v)

    def begin(self):
        return _hdmap_api_py.VisualObjectVector_begin(self)

    def end(self):
        return _hdmap_api_py.VisualObjectVector_end(self)

    def rbegin(self):
        return _hdmap_api_py.VisualObjectVector_rbegin(self)

    def rend(self):
        return _hdmap_api_py.VisualObjectVector_rend(self)

    def clear(self):
        return _hdmap_api_py.VisualObjectVector_clear(self)

    def get_allocator(self):
        return _hdmap_api_py.VisualObjectVector_get_allocator(self)

    def pop_back(self):
        return _hdmap_api_py.VisualObjectVector_pop_back(self)

    def erase(self, *args):
        return _hdmap_api_py.VisualObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdmap_api_py.new_VisualObjectVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hdmap_api_py.VisualObjectVector_push_back(self, x)

    def front(self):
        return _hdmap_api_py.VisualObjectVector_front(self)

    def back(self):
        return _hdmap_api_py.VisualObjectVector_back(self)

    def assign(self, n, x):
        return _hdmap_api_py.VisualObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _hdmap_api_py.VisualObjectVector_resize(self, *args)

    def insert(self, *args):
        return _hdmap_api_py.VisualObjectVector_insert(self, *args)

    def reserve(self, n):
        return _hdmap_api_py.VisualObjectVector_reserve(self, n)

    def capacity(self):
        return _hdmap_api_py.VisualObjectVector_capacity(self)
    __swig_destroy__ = _hdmap_api_py.delete_VisualObjectVector
    __del__ = lambda self: None
VisualObjectVector_swigregister = _hdmap_api_py.VisualObjectVector_swigregister
VisualObjectVector_swigregister(VisualObjectVector)

class VisualPointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualPointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisualPointVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdmap_api_py.VisualPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdmap_api_py.VisualPointVector___nonzero__(self)

    def __bool__(self):
        return _hdmap_api_py.VisualPointVector___bool__(self)

    def __len__(self):
        return _hdmap_api_py.VisualPointVector___len__(self)

    def __getslice__(self, i, j):
        return _hdmap_api_py.VisualPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdmap_api_py.VisualPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdmap_api_py.VisualPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdmap_api_py.VisualPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdmap_api_py.VisualPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdmap_api_py.VisualPointVector___setitem__(self, *args)

    def pop(self):
        return _hdmap_api_py.VisualPointVector_pop(self)

    def append(self, x):
        return _hdmap_api_py.VisualPointVector_append(self, x)

    def empty(self):
        return _hdmap_api_py.VisualPointVector_empty(self)

    def size(self):
        return _hdmap_api_py.VisualPointVector_size(self)

    def swap(self, v):
        return _hdmap_api_py.VisualPointVector_swap(self, v)

    def begin(self):
        return _hdmap_api_py.VisualPointVector_begin(self)

    def end(self):
        return _hdmap_api_py.VisualPointVector_end(self)

    def rbegin(self):
        return _hdmap_api_py.VisualPointVector_rbegin(self)

    def rend(self):
        return _hdmap_api_py.VisualPointVector_rend(self)

    def clear(self):
        return _hdmap_api_py.VisualPointVector_clear(self)

    def get_allocator(self):
        return _hdmap_api_py.VisualPointVector_get_allocator(self)

    def pop_back(self):
        return _hdmap_api_py.VisualPointVector_pop_back(self)

    def erase(self, *args):
        return _hdmap_api_py.VisualPointVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdmap_api_py.new_VisualPointVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hdmap_api_py.VisualPointVector_push_back(self, x)

    def front(self):
        return _hdmap_api_py.VisualPointVector_front(self)

    def back(self):
        return _hdmap_api_py.VisualPointVector_back(self)

    def assign(self, n, x):
        return _hdmap_api_py.VisualPointVector_assign(self, n, x)

    def resize(self, *args):
        return _hdmap_api_py.VisualPointVector_resize(self, *args)

    def insert(self, *args):
        return _hdmap_api_py.VisualPointVector_insert(self, *args)

    def reserve(self, n):
        return _hdmap_api_py.VisualPointVector_reserve(self, n)

    def capacity(self):
        return _hdmap_api_py.VisualPointVector_capacity(self)
    __swig_destroy__ = _hdmap_api_py.delete_VisualPointVector
    __del__ = lambda self: None
VisualPointVector_swigregister = _hdmap_api_py.VisualPointVector_swigregister
VisualPointVector_swigregister(VisualPointVector)

class ProtoMapTileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtoMapTileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProtoMapTileVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hdmap_api_py.ProtoMapTileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hdmap_api_py.ProtoMapTileVector___nonzero__(self)

    def __bool__(self):
        return _hdmap_api_py.ProtoMapTileVector___bool__(self)

    def __len__(self):
        return _hdmap_api_py.ProtoMapTileVector___len__(self)

    def __getslice__(self, i, j):
        return _hdmap_api_py.ProtoMapTileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hdmap_api_py.ProtoMapTileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hdmap_api_py.ProtoMapTileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hdmap_api_py.ProtoMapTileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hdmap_api_py.ProtoMapTileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hdmap_api_py.ProtoMapTileVector___setitem__(self, *args)

    def pop(self):
        return _hdmap_api_py.ProtoMapTileVector_pop(self)

    def append(self, x):
        return _hdmap_api_py.ProtoMapTileVector_append(self, x)

    def empty(self):
        return _hdmap_api_py.ProtoMapTileVector_empty(self)

    def size(self):
        return _hdmap_api_py.ProtoMapTileVector_size(self)

    def swap(self, v):
        return _hdmap_api_py.ProtoMapTileVector_swap(self, v)

    def begin(self):
        return _hdmap_api_py.ProtoMapTileVector_begin(self)

    def end(self):
        return _hdmap_api_py.ProtoMapTileVector_end(self)

    def rbegin(self):
        return _hdmap_api_py.ProtoMapTileVector_rbegin(self)

    def rend(self):
        return _hdmap_api_py.ProtoMapTileVector_rend(self)

    def clear(self):
        return _hdmap_api_py.ProtoMapTileVector_clear(self)

    def get_allocator(self):
        return _hdmap_api_py.ProtoMapTileVector_get_allocator(self)

    def pop_back(self):
        return _hdmap_api_py.ProtoMapTileVector_pop_back(self)

    def erase(self, *args):
        return _hdmap_api_py.ProtoMapTileVector_erase(self, *args)

    def __init__(self, *args):
        this = _hdmap_api_py.new_ProtoMapTileVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _hdmap_api_py.ProtoMapTileVector_push_back(self, x)

    def front(self):
        return _hdmap_api_py.ProtoMapTileVector_front(self)

    def back(self):
        return _hdmap_api_py.ProtoMapTileVector_back(self)

    def assign(self, n, x):
        return _hdmap_api_py.ProtoMapTileVector_assign(self, n, x)

    def resize(self, *args):
        return _hdmap_api_py.ProtoMapTileVector_resize(self, *args)

    def insert(self, *args):
        return _hdmap_api_py.ProtoMapTileVector_insert(self, *args)

    def reserve(self, n):
        return _hdmap_api_py.ProtoMapTileVector_reserve(self, n)

    def capacity(self):
        return _hdmap_api_py.ProtoMapTileVector_capacity(self)
    __swig_destroy__ = _hdmap_api_py.delete_ProtoMapTileVector
    __del__ = lambda self: None
ProtoMapTileVector_swigregister = _hdmap_api_py.ProtoMapTileVector_swigregister
ProtoMapTileVector_swigregister(ProtoMapTileVector)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdmap_api_py.new_Point(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_Point
    __del__ = lambda self: None

    def tell(self):
        return _hdmap_api_py.Point_tell(self)
    __swig_setmethods__["x"] = _hdmap_api_py.Point_x_set
    __swig_getmethods__["x"] = _hdmap_api_py.Point_x_get
    if _newclass:
        x = _swig_property(_hdmap_api_py.Point_x_get, _hdmap_api_py.Point_x_set)
    __swig_setmethods__["y"] = _hdmap_api_py.Point_y_set
    __swig_getmethods__["y"] = _hdmap_api_py.Point_y_get
    if _newclass:
        y = _swig_property(_hdmap_api_py.Point_y_get, _hdmap_api_py.Point_y_set)
    __swig_setmethods__["z"] = _hdmap_api_py.Point_z_set
    __swig_getmethods__["z"] = _hdmap_api_py.Point_z_get
    if _newclass:
        z = _swig_property(_hdmap_api_py.Point_z_get, _hdmap_api_py.Point_z_set)
Point_swigregister = _hdmap_api_py.Point_swigregister
Point_swigregister(Point)

class VisualPoint(Point):
    __swig_setmethods__ = {}
    for _s in [Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisualPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdmap_api_py.new_VisualPoint(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_VisualPoint
    __del__ = lambda self: None
    __swig_setmethods__["pixelSize"] = _hdmap_api_py.VisualPoint_pixelSize_set
    __swig_getmethods__["pixelSize"] = _hdmap_api_py.VisualPoint_pixelSize_get
    if _newclass:
        pixelSize = _swig_property(_hdmap_api_py.VisualPoint_pixelSize_get, _hdmap_api_py.VisualPoint_pixelSize_set)
    __swig_setmethods__["geoSize"] = _hdmap_api_py.VisualPoint_geoSize_set
    __swig_getmethods__["geoSize"] = _hdmap_api_py.VisualPoint_geoSize_get
    if _newclass:
        geoSize = _swig_property(_hdmap_api_py.VisualPoint_geoSize_get, _hdmap_api_py.VisualPoint_geoSize_set)
    __swig_setmethods__["color"] = _hdmap_api_py.VisualPoint_color_set
    __swig_getmethods__["color"] = _hdmap_api_py.VisualPoint_color_get
    if _newclass:
        color = _swig_property(_hdmap_api_py.VisualPoint_color_get, _hdmap_api_py.VisualPoint_color_set)
VisualPoint_swigregister = _hdmap_api_py.VisualPoint_swigregister
VisualPoint_swigregister(VisualPoint)

class VisualObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisualObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdmap_api_py.new_VisualObject()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_VisualObject
    __del__ = lambda self: None

    def getType(self):
        return _hdmap_api_py.VisualObject_getType(self)

    def setType(self, type):
        return _hdmap_api_py.VisualObject_setType(self, type)

    def getHeight(self):
        return _hdmap_api_py.VisualObject_getHeight(self)

    def setHeight(self, height):
        return _hdmap_api_py.VisualObject_setHeight(self, height)

    def getPoints(self):
        return _hdmap_api_py.VisualObject_getPoints(self)

    def setPoints(self, points):
        return _hdmap_api_py.VisualObject_setPoints(self, points)
VisualObject_swigregister = _hdmap_api_py.VisualObject_swigregister
VisualObject_swigregister(VisualObject)

class KeyStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyStatus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdmap_api_py.new_KeyStatus()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_KeyStatus
    __del__ = lambda self: None
    Normal = _hdmap_api_py.KeyStatus_Normal
    Move = _hdmap_api_py.KeyStatus_Move
    SimpleSelection = _hdmap_api_py.KeyStatus_SimpleSelection
    AddSelection = _hdmap_api_py.KeyStatus_AddSelection
    MinusSelection = _hdmap_api_py.KeyStatus_MinusSelection
    ObjectSelection = _hdmap_api_py.KeyStatus_ObjectSelection
    Edit = _hdmap_api_py.KeyStatus_Edit
KeyStatus_swigregister = _hdmap_api_py.KeyStatus_swigregister
KeyStatus_swigregister(KeyStatus)

class Picker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Picker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Picker, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdmap_api_py.delete_Picker
    __del__ = lambda self: None

    def pickPoint(self, p):
        return _hdmap_api_py.Picker_pickPoint(self, p)

    def hasAreaPicker(self):
        return _hdmap_api_py.Picker_hasAreaPicker(self)

    def areaPickPoint(self, p):
        return _hdmap_api_py.Picker_areaPickPoint(self, p)
Picker_swigregister = _hdmap_api_py.Picker_swigregister
Picker_swigregister(Picker)

class BasePicker(Picker):
    __swig_setmethods__ = {}
    for _s in [Picker]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasePicker, name, value)
    __swig_getmethods__ = {}
    for _s in [Picker]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasePicker, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdmap_api_py.new_BasePicker()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_BasePicker
    __del__ = lambda self: None

    def set(self, origin, direction):
        return _hdmap_api_py.BasePicker_set(self, origin, direction)

    def pickPoint(self, p):
        return _hdmap_api_py.BasePicker_pickPoint(self, p)

    def hasAreaPicker(self):
        return _hdmap_api_py.BasePicker_hasAreaPicker(self)

    def areaPickPoint(self, p):
        return _hdmap_api_py.BasePicker_areaPickPoint(self, p)
BasePicker_swigregister = _hdmap_api_py.BasePicker_swigregister
BasePicker_swigregister(BasePicker)

class HDMapTiles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HDMapTiles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HDMapTiles, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdmap_api_py.new_HDMapTiles()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_HDMapTiles
    __del__ = lambda self: None
    __swig_setmethods__["mapTiles"] = _hdmap_api_py.HDMapTiles_mapTiles_set
    __swig_getmethods__["mapTiles"] = _hdmap_api_py.HDMapTiles_mapTiles_get
    if _newclass:
        mapTiles = _swig_property(_hdmap_api_py.HDMapTiles_mapTiles_get, _hdmap_api_py.HDMapTiles_mapTiles_set)
HDMapTiles_swigregister = _hdmap_api_py.HDMapTiles_swigregister
HDMapTiles_swigregister(HDMapTiles)

class DisplayAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayAttribute, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdmap_api_py.new_DisplayAttribute()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_DisplayAttribute
    __del__ = lambda self: None
    __swig_setmethods__["name"] = _hdmap_api_py.DisplayAttribute_name_set
    __swig_getmethods__["name"] = _hdmap_api_py.DisplayAttribute_name_get
    if _newclass:
        name = _swig_property(_hdmap_api_py.DisplayAttribute_name_get, _hdmap_api_py.DisplayAttribute_name_set)
    __swig_setmethods__["value"] = _hdmap_api_py.DisplayAttribute_value_set
    __swig_getmethods__["value"] = _hdmap_api_py.DisplayAttribute_value_get
    if _newclass:
        value = _swig_property(_hdmap_api_py.DisplayAttribute_value_get, _hdmap_api_py.DisplayAttribute_value_set)
    __swig_setmethods__["options"] = _hdmap_api_py.DisplayAttribute_options_set
    __swig_getmethods__["options"] = _hdmap_api_py.DisplayAttribute_options_get
    if _newclass:
        options = _swig_property(_hdmap_api_py.DisplayAttribute_options_get, _hdmap_api_py.DisplayAttribute_options_set)
DisplayAttribute_swigregister = _hdmap_api_py.DisplayAttribute_swigregister
DisplayAttribute_swigregister(DisplayAttribute)

class HDMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HDMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HDMap, name)
    __repr__ = _swig_repr

    def appendRoad(self):
        return _hdmap_api_py.HDMap_appendRoad(self)

    def appendLane(self, width):
        return _hdmap_api_py.HDMap_appendLane(self, width)

    def mergeLanes(self):
        return _hdmap_api_py.HDMap_mergeLanes(self)

    def linkRoads(self):
        return _hdmap_api_py.HDMap_linkRoads(self)

    def appendObject(self):
        return _hdmap_api_py.HDMap_appendObject(self)

    def getCenter(self, onlySelected):
        return _hdmap_api_py.HDMap_getCenter(self, onlySelected)

    def appendPoint(self, p):
        return _hdmap_api_py.HDMap_appendPoint(self, p)

    def insertPoint(self, p):
        return _hdmap_api_py.HDMap_insertPoint(self, p)

    def deletePoints(self):
        return _hdmap_api_py.HDMap_deletePoints(self)

    def setKeyMode(self, mode):
        return _hdmap_api_py.HDMap_setKeyMode(self, mode)

    def move(self, dp):
        return _hdmap_api_py.HDMap_move(self, dp)

    def select(self, picker):
        return _hdmap_api_py.HDMap_select(self, picker)

    def hide(self):
        return _hdmap_api_py.HDMap_hide(self)

    def showAll(self):
        return _hdmap_api_py.HDMap_showAll(self)

    def saveTo(self):
        return _hdmap_api_py.HDMap_saveTo(self)

    def loadFrom(self, tiles):
        return _hdmap_api_py.HDMap_loadFrom(self, tiles)

    def exportOpendrive(self, filename):
        return _hdmap_api_py.HDMap_exportOpendrive(self, filename)

    def getAttributes(self):
        return _hdmap_api_py.HDMap_getAttributes(self)

    def setAttributes(self, attributes):
        return _hdmap_api_py.HDMap_setAttributes(self, attributes)

    def tell(self):
        return _hdmap_api_py.HDMap_tell(self)

    def getError(self):
        return _hdmap_api_py.HDMap_getError(self)

    def getVisualization(self):
        return _hdmap_api_py.HDMap_getVisualization(self)

    def __init__(self):
        this = _hdmap_api_py.new_HDMap()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdmap_api_py.delete_HDMap
    __del__ = lambda self: None
HDMap_swigregister = _hdmap_api_py.HDMap_swigregister
HDMap_swigregister(HDMap)

# This file is compatible with both classic and new-style classes.


